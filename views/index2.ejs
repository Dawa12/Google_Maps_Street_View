<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Places Searchbox</title>
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */

       /*body {
         padding-left: 10px;
       }*/
       #map, #pano {
         height: 400px;
         width: 45%;
         float: left;
         left: 10px;
         top: 10px;
         margin-bottom: 35px;
         margin-left: 25px;
       }

       .save_button {
         margin-bottom: 20px;
         clear: left;
         margin-left: 25px;
       }

       .location {
         height: 200px;
         width: 200px;
         float: left;
       }

       .display_favorites {
         margin-top: 20px;
         clear: left;
         margin-left: 25px;
       }

       .save_button {
         float: left;
         height: 100px;
         width: 300px;
         margin-bottom: 90px;
       }

       .coordinates {
         clear: left;
         margin-left: 25px;
       }

       .coordinates input {
         display: block;
         margin-top: 10px;
       }

       #location_submit {
         margin-top: 10px;
       }

      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

      .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      .pac-container {
        font-family: Roboto;
      }

      #type-selector {
        color: #fff;
        background-color: #4d90fe;
        padding: 5px 11px 0px 11px;
      }

      #type-selector label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      #target {
        width: 345px;
      }

    </style>
  </head>
  <body>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <div id="pano"></div>

    <form class="coordinates save_button" action="/favorites" method="post">
      <input id="lat" name="favorite[lat]">Latitude</input>
      <input id="lng" name="favorite[lng]">Longitude</input>

      <input type="submit" value="Save Location!">
    </form>

    <script>
      function initAutocomplete() {
        var geocoder = new google.maps.Geocoder();

        document.getElementById('pac-input').addEventListener('keyup', function(event) {
          if (event.keyCode === 13) {
    <%# console.log('position is now') %>
            geocodeAddress(geocoder, map);
          }
        });

        var fenway = {lat: <%= lat %>, lng: <%= lng %>};
        <% if (showFavorite) { %>
          <% console.log('true') %>
          <% console.log('showFavorite is: ', showFavorite) %>
          fenway = {lat: <%= showFavorite[showFavorite.length - 1].lat %>, lng: <%= showFavorite[showFavorite.length - 1].lng %>}
        <% } else if (!showFavorite) { %>
          <% console.log('false is rendering') %>
        <% } %>

        var myOptions = {
          center: fenway,
          zoom: 15,
          mapTypeId: 'roadmap'
        }

        var map = new google.maps.Map(document.getElementById('map'), myOptions);
        // var map2 = new google.maps.Map(document.getElementById('map2'), myOptions);

        var panorama = new google.maps.StreetViewPanorama(
            document.getElementById('pano'), {
              position: fenway,
              pov: {
                heading: 34,
                pitch: 10
              }
            });
        map.setStreetView(panorama);

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
    <%# console.log('place is ', place.name) %>
    <%# console.log('place.geometry.location: ', place.geometry.location) %>
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });


        // credit to Taka for helping me place marker and detect marker position
              // determining marker position
        let marker = new google.maps.Marker({
          position: fenway,
          map: map,
          // this makes the marker a draggable item
          draggable: true,
          title: "Drag me!",
          label: "üç≥",
        });

        // adding event listener for the drag release readjutment of values
        google.maps.event.addListener(marker, 'dragend', function (event) {
          // changing values inside of form

          const $lat = document.getElementById('lat');
          const $lng = document.getElementById('lng');

          $lat.value = this.getPosition().lat();
          $lng.value = this.getPosition().lng();
          console.log('got new values for lat and long');
        });
      }
    </script>
    <div class="display_favorites">
      <h2>Your Favorites</h2>
      <% for(var i = 0; i < favorites.length; i++) { %>
        <div class="location">
          <h3>Your latitude</h3><%= favorites[i].lat %>
          <h3>Your longitude</h3><%= favorites[i].lng %>

          <form class="save_button" action="/showfavorite" method="post">
            <input type="hidden" name="favorite[lat]" value="<%= favorites[i].lat %>">
            <input type="hidden" name="favorite[lng]" value="<%= favorites[i].lng %>">
            <input id="location_submit" type="submit" value="Visit Location!">
          </form>
        </div>
      <% } %>
    </div>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBi1R3t0sCpt0ImqxDLaFhw9oxBiB3PmrM&libraries=places&callback=initAutocomplete"
         async defer>
    </script>
  </body>
</html>
